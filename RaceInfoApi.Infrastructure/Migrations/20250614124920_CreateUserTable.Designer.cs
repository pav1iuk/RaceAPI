// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RaceInfoApi.Infrastructure.Data;

#nullable disable

namespace RaceInfoApi.Infrastructure.Migrations
{
    [DbContext(typeof(RaceDbContext))]
    [Migration("20250614124920_CreateUserTable")]
    partial class CreateUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RaceInfoApi.Core.Entities.Driver", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("drivers", (string)null);
                });

            modelBuilder.Entity("RaceInfoApi.Core.Entities.Race", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Laps")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TrackLengthKm")
                        .HasColumnType("double precision");

                    b.Property<string>("Weather")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("races", (string)null);
                });

            modelBuilder.Entity("RaceInfoApi.Core.Entities.RaceResult", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<TimeSpan>("BestLapTime")
                        .HasMaxLength(50)
                        .HasColumnType("interval");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("FinishTime")
                        .HasMaxLength(50)
                        .HasColumnType("interval");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RaceId");

                    b.ToTable("raceresults", (string)null);
                });

            modelBuilder.Entity("RaceInfoApi.Core.Entities.RaceResult", b =>
                {
                    b.HasOne("RaceInfoApi.Core.Entities.Driver", "Driver")
                        .WithMany("Results")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaceInfoApi.Core.Entities.Race", "Race")
                        .WithMany("Results")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("RaceInfoApi.Core.Entities.Driver", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("RaceInfoApi.Core.Entities.Race", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
